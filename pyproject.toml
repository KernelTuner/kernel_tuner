[build-system]
requires = ["poetry-core>=1.7.0", "setuptools>=67.7.2"]
build-backend = "poetry.core.masonry.api"

[project]
name = "kernel_tuner"
description = "An easy to use CUDA/OpenCL kernel tuner in Python"
version = "1.2.0" # adhere to PEP440 versioning: https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#id55
readme = "README.md"
license = "Apache-2.0"
authors = [
    { name = "Ben van Werkhoven", email = "b.vanwerkhoven@esciencecenter.nl"},
    { name = "Alessio Sclocco", email = "a.sclocco@esciencecenter.nl" },
    { name = "Stijn Heldens", email = "s.heldens@esciencecenter.nl" },
    { name = "Floris-Jan Willemsen", email = "f.j.Willemsen@esciencecenter.nl" },
    { name = "Willem-Jan Palenstijn", email = "w.j.palenstijn@liacs.leidenuniv.nl" },
    { name = "Bram Veenboer", email = "veenboer@astron.nl" },
    { name = "Richard Schoonhoven", email = "Richard.Schoonhoven@cwi.nl"  },
    { name = "Leon Oostrum", email = "l.oostrum@esciencecenter.nl" },
]
keywords = [
    "auto-tuning",
    "gpu",
    "computing",
    "pycuda",
    "cuda",
    "pyopencl",
    "opencl",
]
classifiers = [
    "Environment :: Console",
    "Environment :: GPU",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
    "Topic :: System :: Distributed Computing",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]

# ATTENTION: if anything is changed here, run `poetry update`
requires-python = ">=3.10,<4" # <4 is because of hip-python  # NOTE when changing the Python versions, also change the test versions in the Noxfile and GitHub Actions
dependencies = [
    "numpy>=2.0.0",
    "scipy>=1.14.1",    # Python >=3.13 needs scipy >=1.14
    "packaging",        # required by file_utils
    "jsonschema",
    "python-constraint2>=2.2.2",
    "xmltodict",
    "pandas>=2.0.0",
    "scikit-learn>=1.0.2",
]
# NOTE Torch can be used with Kernel Tuner, but is not a dependency, should be up to the user to use it

[project.urls]
homepage = "https://KernelTuner.github.io/kernel_tuner/"
documentation = "https://KernelTuner.github.io/kernel_tuner/"
repository = "https://github.com/KernelTuner/kernel_tuner"
changelog = "https://github.com/KernelTuner/kernel_tuner/blob/master/CHANGELOG.md"
issues = "https://github.com/KernelTuner/kernel_tuner/issues"

[project.scripts]
kernel_tuner = "kernel_tuner.interface:entry_point"

[tool.poetry]
packages = [{ include = "kernel_tuner", from = "." }]
include = [
    { path = "test" },
] # this ensures that people won't have to clone the whole repo to include notebooks, they can just do `pip install kernel_tuner[tutorial,cuda]`

# List of optional dependencies for user installation, e.g. `pip install kernel_tuner[cuda]`, used in the below `extras`.
# Please note that this is different from the dependency groups below, e.g. `docs` and `test`, those are for development.
# ATTENTION: if anything is changed here, run `poetry update`
# CUDA
# cupy-cuda11x = { version = "*", optional = true }    # NOTE: these are completely optional dependencies as described in CONTRIBUTING.rst
# cupy-cuda12x = { version = "*", optional = true }
# cuda-python = { version = "*", optional = true }

[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
priority = "explicit"

[tool.poetry.dependencies]
hip-python = { version = "^6.3.3.540.31", source = "testpypi", optional = true }  # Note: when released, switch this package to pypi and remove tool.poetry.source and move this to [project.optional-dependencies]

[project.optional-dependencies]
cuda = ["pycuda>=2025.1", "nvidia-ml-py>=12.535.108", "pynvml>=11.4.1"] # Attention: if pycuda is changed here, also change `session.install("pycuda")` in the Noxfile
opencl = ["pyopencl"]                                                   # Attention: if pyopencl is changed here, also change `session.install("pyopencl")` in the Noxfile
cuda_opencl = ["pycuda>=2024.1", "pyopencl"]                            # Attention: if pycuda is changed here, also change `session.install("pycuda")` in the Noxfile
hip = ["hip-python"]
tutorial = ["jupyter>=1.0.0", "matplotlib>=3.5.0", "nvidia-ml-py>=12.535.108"]

# ATTENTION: if anything is changed here, run `poetry update` and `poetry export --with docs --without-hashes --format=requirements.txt --output doc/requirements.txt`
# Please note that there is overlap with the `dev` group
[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
sphinx = "^7.3.7"
sphinx_rtd_theme = "^2.0.0"
sphinx-pyproject = "^0.3"
nbsphinx = "^0.9"
ipython = "*"
pytest = "^8.2.0"           # TODO why do we need pytest here?
markupsafe = "^2.0.1"       # TODO why do we need markupsafe here?
# sphinx-autodoc-typehints = "^1.24.0"

# ATTENTION: if anything is changed here, run `poetry update`
# Please also run `poetry export -f requirements.txt --output doc/requirements_test.txt --with test`
[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"
pytest-timeout = "^2.3.1"
pytest-cov = "^5.0.0"
mock = "^5.1.0"
nox = "^2024.4.15"
nox-poetry = "^1.0.3"
ruff = "^0.4.4"
pep440 = "^0.1.2"
tomli = "^2.0.1"          # held back by Python <= 3.10, can be replaced by built-in [tomllib](https://docs.python.org/3.11/library/tomllib.html) from Python 3.11 onwards

# development dependencies are unused for now, as this is already covered by test and docs
# # ATTENTION: if anything is changed here, run `poetry update`
# [tool.poetry.group.dev.dependencies]

[tool.pytest.ini_options]
minversion = "7.4"
pythonpath = [
    "kernel_tuner",
] # necessary to get coverage reports without installing with `-e`
addopts = "--cov --cov-config=.coveragerc --cov-report=html --cov-report=term-missing --cov-fail-under=60"
testpaths = ["test"]

[tool.black]
line-length = 120
[tool.ruff]
line-length = 120
respect-gitignore = true
exclude = ["doc", "examples"]
select = [
    "E", # pycodestyle
    "F", # pyflakes,
    "D", # pydocstyle,
]
[tool.ruff.pydocstyle]
convention = "google"
